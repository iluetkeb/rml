#! /usr/bin/env python
#
#
#
import csv, os.path, subprocess

from rml.environment import Locations

class Times:
	def __init__(self, filename, locations):
		self.loc = locations
		self.filename = filename
		self.split_times = {}

	def add_split(self, cm, start_ts_utc, end_ts_utc):
		start = int(start_ts_utc)
		end = int(end_ts_utc)
		if end < start:
			raise "start must be before end"
		self.split_times[cm] = (start, end)

	def get_splits(self):
		splits = []
		for start, end in self.split_times.values():
			splits.append(start)
			splits.append(end)
		splits.sort()
		return splits

	def open_input(self):
		# open input from either compress or regular file
		input = None
		if self.filename.endswith(".gz"):
			unpacker = subprocess.Popen(["zcat", self.loc.to_in(self.filename)],stdout=subprocess.PIPE)
			input = unpacker.stdout
		else:
			input = file(self.loc.to_in(self.filename))
		return input

	def split_parts(self):		
		items = sorted(self.split_times.items(), cmp=lambda a, b: cmp(a[1][0], b[1][0]))
		self.loc.mkoutdir()
		args = ["logstreamquery"]
		
		for cm, times in items:
			query = """declare namespace xcflog = "http://opensource.cit-ec.de/xcflogger.dtd";
for $e in .[xs:integer(xcflog:millis) >= %d and xs:integer(xcflog:millis) <= %d]
return $e
""" % (int(times[0]) * 1000, int(times[1]) * 1000)
			outputfilename = self.loc.to_out(self.filename, "-%s" % cm)
			if outputfilename.endswith(".gz"):
				outputfilename = outputfilename[:-3]
			args.extend(["-q", query, "-o", outputfilename])
			print args, query
			input = self.open_input()
			try:
				subprocess.check_call(args, stdin=input)
			finally:
				input.close()

if __name__ == '__main__':
	import sys, getopt

	# extract options
	optlist, args = getopt.getopt(sys.argv[1:], 'p:t:')

	# check if we got the right number of non-option args
	if len(args) != 1:
		print "Syntax: %s <csvfile> [-p outputprefix] [-t time_offset]" % sys.argv[0]
		print " - Giving '-' as the csvfile will read from stdin."
		print " - 'time_offset' is in seconds."
		sys.exit(-1)


	# read either from stdin or file
	if args[0] == "-":
		in_stream = sys.stdin
	else:
		in_stream = file(args[0], "rb")

	# handle options
	outputprefix = "."
	offset = 0
	for option, arg in optlist:
		if option == "-p":
			outputprefix = arg
		elif option == "-t":
			offset = int(arg)
		else:
			print "Option %s unrecognized" % option

	# variable for outputs
	file_times = {}
		
	# start processing input
	for row in csv.reader(in_stream, delimiter='\t', quotechar='"'):
		print row
		if len(row) < 11:
			print "Row %s is not in correct format" % row
			continue
		_, session, filename, cm, _, _, start_ts, _, _, end_ts, _ = row
		fullname = os.path.join(session, filename)
		if os.path.exists(fullname):
			time_info = file_times.get(fullname, None)
			if not time_info:
				loc = Locations(session, os.path.join(outputprefix, session))
				time_info = Times(filename, loc)
				file_times[fullname] = time_info
			time_info.add_split(cm, int(start_ts) + offset, int(end_ts) + offset)
		else:
			print "Did not find file %s" % fullname


	# do the splits
	for xt in file_times.values():
		#print vt.filename, vt.to_split_timecodes()
		xt.split_parts()


	
