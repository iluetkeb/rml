#! /usr/bin/python

import sys, os.path
try:
	import rml.rml_config
	if not rml.rml_config.is_installed():
		path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
		print "path", path
		sys.path.append(path)
except ImportError:
	pass

import getopt

def version():
	return 0.2

def usage(config=None):
	print """\
rml -- 	RobotMetaLogger, a framework for logging and working 
	with robot execution data.

Usage: rml [-c config] <command> [args]
	
Command is one of:
	help	Display this help.
	init	Initialize a new log destination directory.
	add 	Add a new log source.
	run	Record a new run of logs, with all the configured sources.
	show	Display the history of runs.

Global options:
	-c	Select the configuration file to use. [Default: $(cwd)/.rml/config.json]

Run "rml help <cmd>" to get more info, if available.

To stop logging, press "Ctrl-C".
"""

import rml.config, rml.probes
import rml.launch as launch
import rml.session as session

class RML:
	def __init__(self, run_config):
		self.run_config = run_config
		self.rml = None

	def cfg(self, options):
		'''Attempt initializing configuration when needed.'''
		if not self.rml:
			self.rml = session.RMLDir(options['cfg_dir'], options['cfg_filename'])
		return self.rml.get_config()

	def run(self, options):
		'''run -- Start logging.'''
		self.cfg(options)
		ps = []
		for cfg in rml.config.get_probe_cfgs():
			ps.append(rml.probes.create(cfg, env, cfg))
	
		print ps
		if not ps or len(ps) == 0:
			print "No probes configured, terminating."
			return
		launch.run(ps)

	def add(self, options):
		'''add <name> <type> -- Add new source of type 'type' and remember it with the given name.'''
		pass

	def init(self, options):
		self.rml = session.initialize(options['cfg_dir'], options['cfg_filename'])

	def show(self, options):
		self.cfg(options)
		print "show: %s" % self.rml.get_config()


if __name__ == '__main__':
	import sys, os

	launcher = RML(dict(verbose=False))

	try:
		opts, args = getopt.gnu_getopt(sys.argv[1:], "c:hv", ["config", "help", "version"])
		if len(args) == 0:
			usage()		
		else:
			# option defaults
			options = {'cfg_dir': None, 'cfg_filename': None }			
			show_help = False
			# parse options			
			for opt, val in opts:
				if opt == "-c":
					options['cfg_dir'] = os.path.dirname(val)
					options['cfg_filename'] = os.path.basename(val)
				if opt == "-h":
					show_help = True
				if opt == "-v":
					print "RML Version %f" % version()
					sys.exit(0)

			# auto-generate help for commands
			if show_help and args[0] == "help":
				if len(args) > 1 and hasattr(launcher, args[1]):
					doc = getattr(launcher, args[1]).__doc__
					if not doc:
						print "No more help available for command '%s'." % args[1]
					else:
						print doc
				else:
					usage()
			# run command, if found
			elif hasattr(launcher, args[0]):
				try:
					getattr(launcher, args[0])(options)
				except rml.config.ConfigurationException, ex:
					print "Initialization failed: ", str(ex)
					
			else:
				print "Command '%s' unknown." % args[0]
	except getopt.GetoptError:
		usage()
		sys.exit(2)
