#! /usr/bin/python

import sys, os
try:
	import rml.rml_config
	if not rml.rml_config.is_installed():
		path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
		sys.path.append(path)
except ImportError:
	pass

import getopt

def version():
	return 0.2

def usage(config=None):
	print """\
rml -- 	RobotMetaLogger, a framework for logging and working 
	with robot execution data.

Usage: rml [-c config] <command> [args]
	
Command is one of:
	help	Display this help.
	init	Initialize a new log destination directory.
	run		Record a new run of logs, with all the configured sources.
	show	Display the history of runs.
	time	Print out the time with sub-second accuracy

Global options:
	-c	Specify configuration file. [Default: $(cwd)/.rml/config.json]

Run "rml help <cmd>" to get more info, if available.

To stop logging, press "Ctrl-C".
"""

import rml.config, rml.probes
import rml.launch as launch
import rml.session as session

class RML:
	def __init__(self, run_config):
		self.run_config = run_config
		self.rml = None

	def cfg(self, options):
		'''Attempt initializing configuration when needed.'''
		if not self.rml:
			self.rml = session.RMLDir(options['cfg_dir'], options['cfg_filename'])
		return self.rml.get_config()

	def run(self, options):
		'''run -- Start logging.'''
		ps = []
		# create a new run
		self.cfg(options).inc_run()
		# set up
		launcher = launch.Launcher(self.cfg(options))
		launcher.setup()
		# load config
		for cfg in self.cfg(options).get_probe_cfgs():
			try:
				ps.append(rml.probes.create(cfg, cfg.get_env(), cfg))
			except rml.probes.ProbeConfigurationException, ex:
				print "Could not find a probe matching %s\nError: %s" % (cfg, ex)
				return 
	
		print ps
		if not ps or len(ps) == 0:
			print "No probes configured, terminating."
			return
		# run
		launch.run(ps)

#	def add(self, options):
#		'''add <name> <class> <type> --		
#			Add a new 'type' source for class 'class' and remember 
#			it with the given name.'''
#		pass

	def init(self, options):
		self.rml = session.initialize(options['cfg_dir'], options['cfg_filename'])

	def time(self, options):
		import time
		sys.stdout.write("\x1b[2J")
		while True:
			sub_sec = str(time.time()).split(".")[1][:2]
			timestr = time.strftime("%Y-%b-%d %T.")
			sys.stdout.write("\x1b[s")
			sys.stdout.write(timestr)
			sys.stdout.write(sub_sec)
			sys.stdout.write("\x1b[u")


	def show(self, options):
		self.cfg(options)
		print "show: %s" % self.rml.get_config()


if __name__ == '__main__':
	import sys, os

	launcher = RML(dict(verbose=False))

	try:
		opts, args = getopt.gnu_getopt(sys.argv[1:], "c:hv", ["config", "help", "version"])
		if len(args) == 0:
			usage()		
		else:
			# option defaults
			options = {'cfg_dir': None, 'cfg_filename': None }			
			show_help = False
			# parse options			
			for opt, val in opts:
				if opt == "-c":
					options['cfg_dir'] = os.path.dirname(val)
					options['cfg_filename'] = os.path.basename(val)
				if opt == "-h":
					show_help = True
				if opt == "-v":
					print "RML Version %f" % version()
					sys.exit(0)

			#print options, show_help

			# auto-generate help for commands
			if show_help:
				if len(args) > 0:
					if hasattr(launcher, args[0]):
						doc = getattr(launcher, args[0]).__doc__
						if not doc:
							print "No more help available for command '%s'." % args[1]
						else:
							print doc
					else:
						print "No such command: '%s'" % args[0]
				else:
					usage()
			# run command, if found
			elif hasattr(launcher, args[0]):
				try:
					getattr(launcher, args[0])(options)
				except rml.config.ConfigurationException, ex:
					print "Initialization failed: ", str(ex)
					
			else:
				print "Command '%s' unknown." % args[0]
	except getopt.GetoptError:
		usage()
		sys.exit(2)
